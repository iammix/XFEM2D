#include "lpenums.p"
/*******************************************************************************
 *
 *   function getPanelEdge( )
 *
 *   Purpose :
 *             TO get integer array FreeEdgeLoop and
 *             CALL "chkPnlShape" FTN
 *               w/t  integer array FreeEdgeLoop()
 *   Input   :
 *             string  array    elmList[]()
 *
 *   Output  :
 *             real array   ra_PanelInfo()
 *                           ra_PanelInfo(1): span  -a
 *                           ra_PanelInfo(2): space -b
 *                           ra_PanelInfo(3): angle
 *                           ra_PanelInfo(4): projected Coordinate (1 or 2)
 *
 *   Side Effects :
 *        <none>
 *******************************************************************************/
function getPanelEdge( i_CntPanel, elmList, ra_PanelInfo, pnts)

#include "XFEM2D.h"

   integer  i_CntPanel
   string   elmList[]
   real     ra_PanelInfo(), pnts()
   
   integer status
   integer num_elems,free_edges,i, k
   integer el_ids(VIRTUAL),shape(VIRTUAL)
   integer el_nodes(VIRTUAL),edge_el_ids(VIRTUAL),dummy(VIRTUAL)
   integer el_con(VIRTUAL),edge_ids(VIRTUAL)
  
   integer FreeEdgeTable(VIRTUAL), NodeIDs(VIRTUAL), CntNode
   integer FreeEdgeLoop(VIRTUAL), chkendNode, startNode, CntLoop
   string  NodeList[VIRTUAL]
  
  num_elems = 0
   
  $ get_ids_from_entity_list ( elmList, "elem", num_elems, el_ids)
  
  num_elems = fem_u_count_id_list( LP_SUBLIST_ELEMENT, elmList, FALSE, status)
  sys_allocate_array(el_ids, 1, num_elems)
  fem_u_get_id_list(LP_SUBLIST_ELEMENT, elmList, num_elems, TRUE, el_ids)
			
  MTH_SORT(el_ids,TRUE,num_elems)

  status = SYS_ALLOCATE_ARRAY(shape,1,num_elems)
  if (status != 0) THEN return status
  status = SYS_ALLOCATE_ARRAY(el_nodes,1,num_elems)
  if (status != 0) THEN return status
  status = SYS_ALLOCATE_ARRAY(edge_el_ids,1,num_elems*MAX_EDGES)
  if (status != 0) THEN return status
  status = SYS_ALLOCATE_ARRAY(edge_ids,1,num_elems*MAX_EDGES)
  if (status != 0) THEN return status
  status = SYS_ALLOCATE_ARRAY(dummy,1,MAX_CONNECT)
  if (status != 0) THEN return status
  status = SYS_ALLOCATE_ARRAY(el_con,1,num_elems,1,MAX_CONNECT)
  if (status != 0) THEN return status

  db_get_nodes_for_elems(num_elems,MAX_CONNECT,el_ids,el_con)
  db_get_elem_shape_for_id(num_elems,el_ids,shape)
  
  for (i = 1 TO num_elems)
     db_get_elem_nodes(el_ids(i),el_nodes(i),dummy)
  end for
  
  /*
   * get all free edges for requested elements
   */
  
  status = fem_u_get_free_edges(el_ids,MAX_CONNECT,MAX_NODE_EDGES, @   
                                /* input  */ MAX_EDGES, num_elems,el_con,shape,el_nodes, @ 
                                /* output */ edge_el_ids,edge_ids,free_edges)             
  if (status != 0) THEN return status
  if (free_edges == 0) THEN return 0
  
$ ####################################################################
   
  sys_reallocate_array(FreeEdgeTable,1,free_edges,1,5)
  sys_reallocate_array(FreeEdgeLoop,1,free_edges+1)
  
  for( i= 1 TO free_edges )
     
     list_get_node_ass_el_edge ("elem "//str_from_integer(edge_el_ids(i))//".1."@
                                       //str_from_integer(edge_ids(i))@
                                      , NodeList)
									  
 $    get_ids_from_entity_list ( NodeList, "node", CntNode, NodeIDs)
 
     CntNode = fem_u_count_id_list(LP_SUBLIST_NODE, NodeList, TRUE, status)
	 sys_allocate_array(NodeIDs, 1, CntNode)
 	 fem_u_get_id_list(LP_SUBLIST_NODE, NodeList, CntNode, TRUE, NodeIDs)
	
	 FreeEdgeTable(i,1) = edge_el_ids(i)
     FreeEdgeTable(i,2) = edge_ids(i)
     FreeEdgeTable(i,3) = NodeIDs(1)
     FreeEdgeTable(i,4) = NodeIDs(2)
     FreeEdgeTable(i,5) = 0 /* flag */
     
  end for
  
  FreeEdgeLoop(1) = FreeEdgeTable(1,3)
  FreeEdgeLoop(2) = FreeEdgeTable(1,4)
  FreeEdgeTable(1,5) =1
  startNode= chkEndNode = FreeEdgeLoop(2)
  CntLoop =2 
  
$  while ( CntLoop <=  free_edges ) /* this is dagerous code */
  
   for ( k=1 TO free_edges-1 )
     for( i=1 TO free_edges )
        if ( (FreeEdgeTable(i,3) == chkendNode)&& @
             (FreeEdgeTable(i,5)==0) ) THEN  
          CntLoop = CntLoop+1
          FreeEdgeTable(i,5)=1
          FreeEdgeLoop(CntLoop) = FreeEdgeTable(i,4)
          chkendNode = FreeEdgeLoop(CntLoop)
        else if((FreeEdgeTable(i,4) == chkendNode)&& @
                (FreeEdgeTable(i,5)==0) ) THEN  
          CntLoop = CntLoop+1
          FreeEdgeTable(i,5)=1
          FreeEdgeLoop(CntLoop) = FreeEdgeTable(i,3)
          chkendNode = FreeEdgeLoop(CntLoop)
        end if      	
     end for
   end for
   
   if ( CntLoop <= free_edges ) THEN 
   	ui_write("Panel "//str_from_integer(i_CntPanel)//" has HOLEs @ "//elmList)
   	gm_hilight_string(elmList,4)
   	return 0	  	
   end if	
     
$  end while
 
  
$	DUMP 	FreeEdgeLoop, FreeEdgeTable, CntLoop
$  DUMP "#### EDGE CHECK ####"
 
   integer pid
	pid = chkPnlShape(i_CntPanel,elmList, FreeEdgeLoop, 11.5, ra_PanelInfo, pnts)

   $ ui_writec("%7f",ra_PanelInfo(1:7))
  
  return pid

end function
