#include "appforms.p"
#include "lpenums.i"
#define CLASSNAME Line_Split
#define CLASS_STR "Line_Split"

class CLASSNAME

function Line_Split_Apply_cb(sdbox_id_elem, sdbox_id_pnt1, sdbox_id_pnt2)
     widget sdbox_id_elem, sdbox_id_pnt1, sdbox_id_pnt2

$ get global tolerance
     logical l_conf
     integer i_warn
     real r_tol

     pref_global_get(l_conf, i_warn,r_tol)

/*   First Line */
     string s_pnt1[virtual], s_pnt2[virtual]

     ui_wid_get_vstring(sdbox_id_pnt1, "VALUE", s_pnt1)
     ui_wid_get_vstring(sdbox_id_pnt2, "VALUE", s_pnt2)

     integer i_nd1(1), i_nd2(1)
     fem_u_get_id_list(LP_SUBLIST_NODE, s_pnt1, 1, TRUE, i_nd1)
     fem_u_get_id_list(LP_SUBLIST_NODE, s_pnt2, 1, TRUE, i_nd2)

     integer i_node_id(4)
     i_node_id(1) = i_nd1(1)
     i_node_id(2) = i_nd2(1)

     real r_pnt(4,3)
     db_get_node(i_node_id(1), r_pnt(1,1:3))
     db_get_node(i_node_id(2), r_pnt(2,1:3))

/* Second Line */

     string s_Elems[virtual]
     ui_wid_get_vstring(sdbox_id_elem, "VALUE", s_Elems)

     integer nElem, status
     nElem = fem_u_count_id_list(LP_SUBLIST_ELEMENT, s_Elems, FALSE, status)

     integer ia_elem_id(virtual)
     sys_allocate_array(ia_elem_id, 1, nElem)

     fem_u_get_id_list(LP_SUBLIST_ELEMENT, s_Elems, nElem, TRUE, ia_elem_id)

     integer ia_elem_node_id(virtual), ia_node_id(virtual)
     sys_allocate_array(ia_elem_node_id, 1, nElem, 1, 6)
     sys_allocate_array(ia_node_id, 1, nElem, 1, 4)
     db_get_nodes_for_elems(nElem, 4, ia_elem_id, ia_node_id)

     integer ia_shape_id(virtual)
     sys_allocate_array(ia_shape_id, 1, nElem)
     db_get_elem_shape_for_id(nElem, ia_elem_id, ia_shape_id)

     logical la_edge_chk(virtual)
     sys_allocate_array(la_edge_chk, 1, nElem, 1, 4)

     integer idx, idk, id, cnt
     real r_px(3)

     for(idx=1 to nElem)
          id = 4
          if(ia_shape_id(idx) == 3)then
               cnt = 2
          else if(ia_shape_id(idx)==4)then
               cnt = 3
          end if

          for(idk = 0 to cnt)
               i_node_id(3) = ia_node_id(idx, mth_mod(idk,cnt+1)+1)
               i_node_id(4) = ia_node_id(idx, mth_mod(idk+1,cnt+1)+1)

               db_get_node(i_node_id(3), r_pnt(3,1:3))
               db_get_node(i_node_id(4), r_pnt(4,1:3))

               real div_s

               status = FemFx.intersect_point(i_node_id, div_s, r_px)

               la_edge_chk(idx, idk+1) = FALSE
               ia_elem_node_id(idx,1:4) = ia_node_id(idx,1:4)

               if(div_s > 0 && div_s < 1) then
                    id += 1
                    la_edge_chk(idx, idk+1) = TRUE

                    r_px(1) = r_pnt(3,1) + div_s*(r_pnt(4,1)-r_pnt(3,1))
                    r_px(2) = r_pnt(3,2) + div_s*(r_pnt(4,2)-r_pnt(3,2))
                    r_px(3) = r_pnt(3,3) + div_s*(r_pnt(4,3)-r_pnt(3,3))

                    string fem_create_nodes__nodes_created[virtual]

                    fem_create_nodes_1( "Coord 0", "Coord 0", 3, "#", @
                                        "[" // str_from_real(r_px(1)) //","// str_from_real(r_px(2)) // "," // str_from_real(r_px(3)) // "]", @
                                        fem_create_nodes__nodes_created )

                    if(id> 6)then
$                         dump id
$                         dump r_px
                    else
                         ia_elem_node_id(idx, id) = str_to_integer(fem_create_nodes__nodes_created)

                    end if
               else
$                    dump i_node
$                    dump r_pnt
               end if
          end for
$          dump edge_chk(idx,1:4)
     end for

     integer i_nodeX(4), i_nodeY(4), temp_node(3)
     integer reg_id(1), i_eid(8), i, n_eid
     real mag1, mag2, r_cxyz(3)
     string s_temp[virtual]
     integer nNode = 6
     integer i_chk1, i_chk2, k
     STRING fem_delete_element_deleted_ids[VIRTUAL]

     for(idx=1 to nElem)

          db_get_region_for_elements ( 1, ia_elem_id(idx:idx), reg_id)

          n_eid = 0
          if(n_eid == 0) then
               n_eid = CLASSNAME.QUAD4_Edge_Split(ia_elem_id(idx), i_node_id(1:2), ia_elem_node_id(idx,1:6), ia_shape_id(idx), la_edge_chk(idx,1:4), i_eid)
          end if
          if(n_eid == 0) then
               n_eid = CLASSNAME.QUAD4_Edge_Split2(ia_elem_id(idx), i_node_id(1:2), ia_elem_node_id(idx,1:6), ia_shape_id(idx), la_edge_chk(idx,1:4),i_eid)
          end if
          if(n_eid == 0) then
               n_eid = CLASSNAME.QUAD4_Node_Edge_Split(ia_elem_id(idx), i_node_id(1:2), ia_elem_node_id(idx,1:6), ia_shape_id(idx), la_edge_chk(idx,1:4),i_eid)
          end if
          if(n_eid == 0) then
               n_eid = CLASSNAME.QUAD4_Node_Node_Split(ia_elem_id(idx), i_node_id(1:2), ia_elem_node_id(idx,1:6), ia_shape_id(idx), la_edge_chk(idx,1:4),i_eid)
          end if
          if(n_eid == 0) then
               n_eid = CLASSNAME.TRIA3_Edge_Edge_Split(ia_elem_id(idx), i_node_id(1:2), ia_elem_node_id(idx,1:6), ia_shape_id(idx), la_edge_chk(idx,1:4),i_eid)
          end if
          if(n_eid == 0) then
               n_eid = CLASSNAME.TRIA3_Node_Edge_Split(ia_elem_id(idx), i_node_id(1:2), ia_elem_node_id(idx,1:6), ia_shape_id(idx), la_edge_chk(idx,1:4),i_eid)
          end if

          if(n_eid != 0)then
               fem_delete_elem_and_node("Elm " // str_from_integer(ia_elem_id(idx)), fem_delete_element_deleted_ids )
               for(i=1 to n_eid)
                    db_associate_element_to_region(i_eid(i), reg_id(1))
               end for
          end if
          $ app_int_array_to_vstring("Element", n_eid, i_eid, s_eid)
     end for

     sys_free_array(ia_elem_id)
     sys_free_array(ia_elem_node_id)
     sys_free_array(ia_node_id)
     sys_free_array(ia_shape_id)
     sys_free_array(la_edge_chk)

     repaint_graphics()

end function

function cb_Exit()

    ui_form_hide(CLASS_STR)
    ui_form_delete(CLASS_STR)

end function

function split_node_check(i_eid, check_node)
integer i_eid, i_temp(1), check_node
integer i_nid(4)


     i_temp(1) = i_eid
     db_get_nodes_for_elems(1, 4, i_temp, i_nid)
$     dump i_nid
     integer i, i_chk
     for(i = 1 to 4)
$          dump check_node
$          dump i_nid(i)
          if(check_node == i_nid(i)) then
               i_chk = i
          end if
     end for

     return i_chk
end function

function QUAD4_Node_Node_Split(i_eid, i_nid, i_node_id, i_shape_id, l_edge_chk, i_elem_id)
     integer i_eid
     integer i_nid()
     integer i_node_id()
     integer i_shape_id
     logical l_edge_chk()
     integer i_elem_id()

     if(i_shape_id != 4) then return 0

     integer diagonal(2,2)
     diagonal = FemFx.QUAD4_diagonal_check(i_node_id)

     integer i_nodeX(4)
     integer nElem = 0

     if(diagonal(1,1) == i_nid(1) || diagonal(1,2) == i_nid(1)) then
          i_nodeX(1) = diagonal(1,1)
          i_nodeX(2) = diagonal(1,2)
          i_nodeX(3) = diagonal(2,1)
          i_nodeX(4) = 0
          i_elem_id(1) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))
          i_nodeX(1) = diagonal(1,1)
          i_nodeX(2) = diagonal(1,2)
          i_nodeX(3) = diagonal(2,2)
          i_nodeX(4) = 0
          i_elem_id(2) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))
          nElem = 2

     else if(diagonal(2,1) == i_nid(1) || diagonal(2,2) == i_nid(1)) then
          i_nodeX(1) = diagonal(2,1)
          i_nodeX(2) = diagonal(2,2)
          i_nodeX(3) = diagonal(1,1)
          i_nodeX(4) = 0
          i_elem_id(1) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))
          i_nodeX(1) = diagonal(2,1)
          i_nodeX(2) = diagonal(2,2)
          i_nodeX(3) = diagonal(1,2)
          i_nodeX(4) = 0
          i_elem_id(2) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))
          nElem = 2

     end if

     return nElem
end function

function QUAD4_Node_Edge_Split(i_eid, i_nid, i_node_id, i_shape_id, l_edge_chk, i_elem_id)
     integer i_eid
     integer i_nid()
     integer i_node_id()
     integer i_shape_id
     logical l_edge_chk()
     integer i_elem_id()

     if(i_shape_id != 4) then return 0

     integer i, j
     integer i_nodeX(4)
     integer nElem = 0

     integer i_edge_node_id(4,2)
     for(i=1 to 4)
          i_edge_node_id(i,1) = i_node_id(i)
          i_edge_node_id(i,2) = i_node_id(mth_mod(i,4)+1)
     end for

     integer idx
     for(i=1 to 4)
          for(j=1 to 2)
               if(i_node_id(i) == i_nid(j))then
                    if(l_edge_chk(mth_mod(i,4)+1) == TRUE) then
                         i_nodeX(1) = i_node_id(i)
                         i_nodeX(2) = i_node_id(mth_mod(i,4)+1)
                         i_nodeX(3) = i_node_id(5)
                         i_nodeX(4) = 0
                         i_elem_id(1) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))
                         i_nodeX(1) = i_node_id(i)
                         i_nodeX(2) = i_node_id(mth_mod(i+1,4)+1)
                         i_nodeX(3) = i_node_id(mth_mod(i+2,4)+1)
                         i_nodeX(4) = i_node_id(5)
                         i_elem_id(2) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))
                         nElem = 2
                         idx = mth_mod(i,4)+1
                         CLASSNAME.split_1delem(i_edge_node_id(idx,1:2), i_node_id(5:6))

                    else if(l_edge_chk(mth_mod(i+1,4)+1) == TRUE) then
                         i_nodeX(1) = i_node_id(i)
                         i_nodeX(2) = i_node_id(mth_mod(i,4)+1)
                         i_nodeX(3) = i_node_id(mth_mod(i+1,4)+1)
                         i_nodeX(4) = i_node_id(5)
                         i_elem_id(1) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))
                         i_nodeX(1) = i_node_id(i)
                         i_nodeX(2) = i_node_id(mth_mod(i+2,4)+1)
                         i_nodeX(3) = i_node_id(5)
                         i_nodeX(4) = 0
                         i_elem_id(2) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))
                         nElem = 2
                         idx = mth_mod(i+1,4)+1
                         CLASSNAME.split_1delem(i_edge_node_id(idx, 1:2), i_node_id(5:6))

                    end if
               end if
          end for
     end for

     return nElem
end function

function QUAD4_Edge_Split(i_eid, i_nid, i_node_id, i_shape_id, l_edge_chk, i_elem_id)
     integer i_eid
     integer i_nid()
     integer i_node_id()
     integer i_shape_id
     logical l_edge_chk()
     integer i_elem_id()

     if(i_shape_id != 4) then return 0

     integer i_nodeX(4)
     integer nElem = 0

     integer i, i_edge_node_id(4,2)
     for(i=1 to 4)
          i_edge_node_id(i,1) = i_node_id(i)
          i_edge_node_id(i,2) = i_node_id(mth_mod(i,4)+1)
     end for

     if(l_edge_chk(1) == TRUE && l_edge_chk(3)== TRUE) then
          if(l_edge_chk(2) == FALSE && l_edge_chk(4)== FALSE) then
               i_nodeX(1) = i_node_id(1)
               i_nodeX(2) = i_node_id(5)
               i_nodeX(3) = i_node_id(6)
               i_nodeX(4) = i_node_id(4)
               i_elem_id(1) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))
               i_nodeX(1) = i_node_id(2)
               i_nodeX(2) = i_node_id(3)
               i_nodeX(3) = i_node_id(5)
               i_nodeX(4) = i_node_id(6)
               i_elem_id(2) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))
               nElem = 2
               CLASSNAME.split_1delem(i_edge_node_id(1,1:2), i_node_id(5:6))
               CLASSNAME.split_1delem(i_edge_node_id(3,1:2), i_node_id(5:6))

           end if
     else if(l_edge_chk(2) == TRUE && l_edge_chk(4) == TRUE) then
          if(l_edge_chk(1) == FALSE && l_edge_chk(3) == FALSE) then
               i_nodeX(1) = i_node_id(1)
               i_nodeX(2) = i_node_id(2)
               i_nodeX(3) = i_node_id(5)
               i_nodeX(4) = i_node_id(6)
               i_elem_id(1) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))
               i_nodeX(1) = i_node_id(3)
               i_nodeX(2) = i_node_id(4)
               i_nodeX(3) = i_node_id(5)
               i_nodeX(4) = i_node_id(6)
               i_elem_id(2) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))
               nElem =2
               CLASSNAME.split_1delem(i_edge_node_id(2,1:2), i_node_id(5:6))
               CLASSNAME.split_1delem(i_edge_node_id(4,1:2), i_node_id(5:6))

          end if
     end if

     return nElem
end function

function QUAD4_Edge_Split2(i_eid, i_nid, i_node_id, i_shape_id, l_edge_chk, i_elem_id)
     integer i_eid
     integer i_nid()
     integer i_node_id()
     integer i_shape_id
     logical l_edge_chk()
     integer i_elem_id()

     if(i_shape_id != 4) then return 0

     integer i, idx
     integer nElem = 0
     integer i_nodeX(4), i_nodeY(4), temp_node(3)
     real r_cxyz(3)
     string s_temp[5], fem_create_nodes__nodes_created[virtual]

     integer i_edge_node_id(4,2)
     for(i=1 to 4)
          i_edge_node_id(i,1) = i_node_id(i)
          i_edge_node_id(i,2) = i_node_id(mth_mod(i,4)+1)
     end for

     for(i = 0 to 3)
          if(l_edge_chk(mth_mod(i,4)+1) == TRUE && l_edge_chk(mth_mod(i+1,4)+1) == TRUE)then
               if(l_edge_chk(mth_mod(i+2,4)+1) == FALSE && l_edge_chk(mth_mod(i+3,4)+1) == FALSE)then
                    i_nodeX(1) = i_node_id(mth_mod(i+1,4)+1)
                    i_nodeX(2) = i_node_id(5)
                    i_nodeX(3) = i_node_id(6)
                    i_nodeX(4) = 0
                    i_elem_id(1) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))

                    temp_node(1) = i_node_id(mth_mod(i+3,4)+1)
                    temp_node(2) = i_node_id(5)
                    temp_node(3) = i_node_id(6)

                    r_cxyz = FemFx.nodes_center(3, temp_node, s_temp)

                    fem_create_nodes_1( "Coord 0", "Coord 0", 3, "#", @
                                   "[" // str_from_real(r_cxyz(1)) //","// str_from_real(r_cxyz(2)) // "," // str_from_real(r_cxyz(3)) // "]", @
                                   fem_create_nodes__nodes_created )

                    i_nodeX(1) = str_to_integer(fem_create_nodes__nodes_created)
                    i_nodeX(2) = i_node_id(5)
                    i_nodeX(3) = i_node_id(6)
                    i_nodeX(4) = 0
                    i_elem_id(2) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))

                    integer node_1
                    real mag1, mag2
                    node_1 = i_node_id(mth_mod(i,4)+1)
                    mag1 = FemFx.vector_from_nodes(i_node_id(5), node_1, 2)
                    mag2 = FemFx.vector_from_nodes(i_node_id(6), node_1, 2)
                    if(mag1 < mag2 )then
                         i_nodeX(2) = i_node_id(5)
                         i_nodeY(2) = i_node_id(6)
                    else
                         i_nodeX(2) = i_node_id(6)
                         i_nodeY(2) = i_node_id(5)
                    end if

                    i_nodeX(1) = i_node_id(mth_mod(i,4)+1)
                    i_nodeX(3) = i_node_id(mth_mod(i+3,4)+1)
                    i_nodeX(4) = str_to_integer(fem_create_nodes__nodes_created)
                    i_elem_id(3) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))
                    i_nodeY(1) = i_node_id(mth_mod(i+2,4)+1)
                    i_nodeY(3) = i_node_id(mth_mod(i+3,4)+1)
                    i_nodeY(4) = str_to_integer(fem_create_nodes__nodes_created)
                    i_elem_id(4) = str_to_integer(FemFx.nodes_SHELL(i_nodeY))
                    nElem = 4
                    idx = mth_mod(i,4)+1
                    CLASSNAME.split_1delem(i_edge_node_id(idx,1:2), i_node_id(5:6))
                    idx = mth_mod(i+1,4)+1
                    CLASSNAME.split_1delem(i_edge_node_id(idx,1:2), i_node_id(5:6))

                end if
          end if
     end for

     return nElem
end function

function TRIA3_Edge_Edge_Split(i_eid, i_node_id, i_elem_node_id, i_shape_id, l_edge_chk,i_elem_id)
integer i_eid
integer i_node_id()
integer i_elem_node_id()
integer i_shape_id
logical l_edge_chk()
integer i_elem_id()

     if(i_shape_id != 3) then return 0

     integer i, idx
     integer nElem = 0
     integer i_NodeX(4)

     integer i_edge_node_id(3,2)
     for(i=1 to 3)
          i_edge_node_id(i,1) = i_elem_node_id(i)
          i_edge_node_id(i,2) = i_elem_node_id(mth_mod(i,3)+1)
     end for

     for(i = 0 to 2)
          if(l_edge_chk(mth_mod(i,3)+1) == TRUE && l_edge_chk(mth_mod(i+1,3)+1) == TRUE)then
               i_nodeX(1) = i_elem_node_id(mth_mod(i,3)+1)
               i_nodeX(2) = i_elem_node_id(5)
               i_nodeX(3) = i_elem_node_id(6)
               i_nodeX(4) = i_elem_node_id(mth_mod(i+2,3)+1)
               i_elem_id(1) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))

               i_nodeX(1) = i_elem_node_id(mth_mod(i+1,3)+1)
               i_nodeX(2) = i_elem_node_id(5)
               i_nodeX(3) = i_elem_node_id(6)
               i_nodeX(4) = 0
               i_elem_id(2) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))

               nElem = 2
               idx = mth_mod(i,3)+1
               CLASSNAME.split_1delem(i_edge_node_id(idx,1:2), i_elem_node_id(5:6))
               idx = mth_mod(i+1,3)+1
               CLASSNAME.split_1delem(i_edge_node_id(idx,1:2), i_elem_node_id(5:6))

          end if
     end for

     return nElem
end function

function TRIA3_Node_Edge_Split(i_eid, i_node_id, i_elem_node_id, i_shape_id, l_edge_chk, i_elem_id)
integer i_eid
integer i_node_id()
integer i_elem_node_id()
integer i_shape_id
logical l_edge_chk()
integer i_elem_id()

     if(i_shape_id != 3) then return 0

     integer i, idx
     integer i_nodeX(4)
     integer nElem = 0

     integer i_edge_node_id(3,2)
     for(i=1 to 3)
          i_edge_node_id(i,1) = i_elem_node_id(i)
          i_edge_node_id(i,2) = i_elem_node_id(mth_mod(i,3)+1)
     end for

     for(i=1 to 3)
          if(i_elem_node_id(i) == i_node_id(1) || i_elem_node_id(i) == i_node_id(2))then
               if(l_edge_chk(mth_mod(i,3)+1) == TRUE) then
                    i_nodeX(1) = i_elem_node_id(i)
                    i_nodeX(2) = i_elem_node_id(mth_mod(i,3)+1)
                    i_nodeX(3) = i_elem_node_id(5)
                    i_nodeX(4) = 0
                    i_elem_id(1) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))

                    i_nodeX(1) = i_elem_node_id(i)
                    i_nodeX(2) = i_elem_node_id(mth_mod(i+1,3)+1)
                    i_nodeX(3) = i_elem_node_id(5)
                    i_nodeX(4) = 0
                    i_elem_id(2) = str_to_integer(FemFx.nodes_SHELL(i_nodeX))
                    nElem = 2
                    idx = mth_mod(i,3)+1
                    CLASSNAME.split_1delem(i_edge_node_id(idx,1:2), i_elem_node_id(5:6))

               end if
          end if
     end for

     return nElem
end function

function split_1delem(i_edge_node_id, i_split_nodes)
integer i_edge_node_id()
integer i_split_nodes()

     integer i_nElem, ia_elem_id(virtual)
     db_get_elem_use_all_node (2, i_edge_node_id, i_nElem, ia_elem_id)

     if(i_nElem == 0) then return -1

     integer ia_shape_id(virtual), i_node_id(2)
     sys_allocate_array(ia_shape_id, 1, i_nElem)
	db_get_elem_shape_for_id(i_nElem, ia_elem_id, ia_shape_id)

     integer i, j, i_split_elem_id, cnt

     for(i = 1 to i_nElem)
          if(ia_shape_id(i) == 2)then
               db_get_nodes_for_elems(1, 2, ia_elem_id(i:i), i_node_id)
               cnt = 0
               for(j=1 to 2)
                    if(i_edge_node_id(1) == i_node_id(j))then
                         cnt += 1
                    end if
                    if(i_edge_node_id(2) == i_node_id(j))then
                         cnt += 1
                    end if
               end for

               if(cnt == 2) then i_split_elem_id = ia_elem_id(i)
          end if
     end for

     integer i_split_node_id
     if(i_split_nodes(2) == 0)then
          i_split_node_id = i_split_nodes(1)
     else
          i_split_node_id = CLASSNAME.edge_node_check(i_edge_node_id, i_split_nodes)
     end if

     logical l_conf
     integer i_warn
     real r_tol

     pref_global_get(l_conf, i_warn, r_tol)

     string s_split_elem_id[15]
     string s_split_node_id[15]

     s_split_elem_id = "Elem " // str_from_integer(i_split_elem_id)
     s_split_node_id = "Node " // str_from_integer(i_split_node_id)

     if(i_split_elem_id != 0)then
          au_break_bar_split.break_bar_at_nodes( s_split_elem_id, "Leave As Is", r_tol, s_split_node_id, TRUE, TRUE, FALSE)
     end if

     return 0

     sys_free_array(ia_shape_id)
     sys_free_array(ia_elem_id)
end function

function edge_node_check(i_curve_node, i_node_id)
integer i_curve_node()
integer i_node_id()

     integer i, i_node_1, i_node_2
     real mag(2)
     string curve_btw_nodes[255]
     string s_node_id[15]
     string fem_create_node_pro_created_ids[virtual]
     string fem_delete_node_deleted_ids[virtual]
     string fem_delete_node_not_found_ids[virtual]

     for(i=1 to 2)
          curve_btw_nodes = "Construct 2PointCurve(Evaluate Geometry(Node " // str_from_integer(i_curve_node(1)) // "))(Evaluate Geometry(Node " // str_from_integer(i_curve_node(2)) // "))"
          s_node_id = "Node " // str_from_integer(i_node_id(i))
          fem_create_node_project_v1( "Coord 0", "Coord 0", 2, "#", s_node_id, curve_btw_nodes, 3, 1, "<1 0 0>", "Coord 0", fem_create_node_pro_created_ids )
          i_node_1 = str_to_integer(fem_create_node_pro_created_ids)
          i_node_2 = i_node_id(i)
          mag(i) = FemFx.vector_from_nodes(i_node_1, i_node_2, 2)
          fem_delete_free_node( "Node " // fem_create_node_pro_created_ids, fem_delete_node_deleted_ids, fem_delete_node_not_found_ids )
     end for

     integer i_split_node
     if(mag(1) < mag(2)) then
          i_split_node = i_node_id(1)
     else if(mag(1) > mag(2)) then
          i_split_node = i_node_id(2)
     end if

     return i_split_node

end function
end class

